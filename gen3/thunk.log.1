Preprocessing executable 'Genesis' for Genesis-0.1.0.0...
8c82e09
^git hash
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
1 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
2 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
3 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
4 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
5 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
6 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
7 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
8 arch
Basetime is: 6.42
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.45482866043613707]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
9 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
10 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
11 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
12 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
13 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
14 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
15 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
16 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
17 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4434389140271493]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
18 arch
Basetime is: 6.59
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44309559939301973]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
19 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
20 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4374057315233786]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
21 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
22 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44393939393939397]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
23 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
24 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
25 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
26 arch
Basetime is: 6.59
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44613050075872535]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
27 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4427710843373494]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
28 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
29 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
30 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4374057315233786]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
31 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43806646525679754]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
32 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43843843843843844]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
33 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4425981873111783]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
34 arch
Basetime is: 6.58
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44376899696048633]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
35 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
36 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
37 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
38 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
39 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
40 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
41 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
42 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
43 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
44 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4374057315233786]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
45 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
46 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
47 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.443267776096823]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
48 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
49 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
1 gens
50 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
1 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
2 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
3 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43609022556390975]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
4 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4214501510574018]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
5 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
6 arch
Basetime is: 6.78
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4218289085545722]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.42920353982300885]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
7 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
8 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4387291981845688]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
9 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43843843843843844]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
10 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44242424242424244]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
11 arch
Basetime is: 6.59
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44309559939301973]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44157814871016693]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
12 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
13 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43759398496240604]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
14 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.440909090909091]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
15 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43759398496240604]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
16 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4387291981845688]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
17 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43759398496240604]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
18 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
19 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4441087613293051]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
20 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
21 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
22 arch
Basetime is: 6.58
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44224924012158057]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44376899696048633]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
23 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
24 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
25 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
26 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
27 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4393939393939394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
28 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4393939393939394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
29 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
30 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
31 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
32 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
33 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
34 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
35 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
36 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
37 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.440909090909091]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
38 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
39 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
40 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
41 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.41818181818181815]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
42 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4425981873111783]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
43 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43609022556390975]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43759398496240604]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
44 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
45 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.440909090909091]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
46 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.440909090909091]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
47 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
48 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
49 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43806646525679754]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
2 gens
50 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
1 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4374057315233786]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
2 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
3 arch
Basetime is: 6.59
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44309559939301973]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
4 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4393939393939394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4393939393939394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.440909090909091]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
5 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4387291981845688]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
6 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
7 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
8 arch
Basetime is: 6.67
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43928035982009]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4362818590704648]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4362818590704648]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
9 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
10 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
11 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4393939393939394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4393939393939394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44242424242424244]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
12 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4374057315233786]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
13 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44393939393939397]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.440909090909091]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
14 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4374057315233786]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
15 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
16 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4393939393939394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
17 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
18 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
19 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
20 arch
Basetime is: 6.59
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44309559939301973]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4400606980273141]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
21 arch
Basetime is: 6.59
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44309559939301973]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4400606980273141]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
22 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44242424242424244]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
23 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
24 arch
Basetime is: 6.59
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44309559939301973]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44309559939301973]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
25 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
26 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
27 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
28 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.440909090909091]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
29 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
30 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
31 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4367469879518072]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
32 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4374057315233786]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
33 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4372163388804841]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
34 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
35 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
36 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
37 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
38 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
39 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
40 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43806646525679754]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
41 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
42 arch
Basetime is: 6.58
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44072948328267475]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44224924012158057]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44224924012158057]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
43 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
44 arch
Basetime is: 6.59
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44309559939301973]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4400606980273141]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
45 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4393939393939394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.440909090909091]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
46 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
47 arch
Basetime is: 6.57
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4444444444444444]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4444444444444444]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.441400304414003]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
48 arch
Basetime is: 6.58
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44224924012158057]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44224924012158057]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44072948328267475]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
49 arch
Basetime is: 6.59
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44309559939301973]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44157814871016693]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
3 gens
50 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4393939393939394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4393939393939394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.440909090909091]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
1 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.440909090909091]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
2 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
3 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44393939393939397]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4393939393939394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4393939393939394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
4 arch
Basetime is: 6.59
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4400606980273141]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44157814871016693]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
5 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
6 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4138972809667674]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
7 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4387291981845688]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
8 arch
Basetime is: 6.59
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44309559939301973]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4385432473444613]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44157814871016693]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
9 arch
Basetime is: 6.59
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4385432473444613]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4400606980273141]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4400606980273141]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
10 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
11 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
12 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43806646525679754]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
13 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4352409638554217]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
14 arch
Basetime is: 6.59
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4446130500758726]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44309559939301973]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44157814871016693]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
15 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4393939393939394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44242424242424244]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
16 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4393939393939394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.440909090909091]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
17 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4387291981845688]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
18 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4393939393939394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
19 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.42813918305597576]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
20 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
21 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
22 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
23 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4367469879518072]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
24 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4441087613293051]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
25 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4365558912386707]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
26 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4387291981845688]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
27 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
28 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.440909090909091]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
29 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
30 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4387291981845688]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
31 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
32 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
33 arch
Basetime is: 6.58
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44224924012158057]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44224924012158057]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44072948328267475]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44072948328267475]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
34 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4374057315233786]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
35 arch
Basetime is: 6.59
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4400606980273141]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44157814871016693]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
36 arch
Basetime is: 6.58
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44072948328267475]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44072948328267475]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44224924012158057]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44224924012158057]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
37 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
38 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
39 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
40 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
41 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
42 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.440909090909091]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
43 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.443267776096823]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
44 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
45 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4177978883861237]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
46 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43806646525679754]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
47 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44242424242424244]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
48 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
49 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
4 gens
50 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
1 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
2 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
3 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
4 arch
Basetime is: 6.59
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44309559939301973]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4400606980273141]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44309559939301973]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44309559939301973]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
5 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
6 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
7 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43806646525679754]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
8 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4387291981845688]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
9 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
10 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4365558912386707]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
11 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
12 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
13 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
14 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4378787878787879]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4393939393939394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
15 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
16 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
17 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
18 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.440909090909091]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
19 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4367469879518072]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
20 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
21 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
22 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43806646525679754]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
23 arch
Basetime is: 6.59
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4400606980273141]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44309559939301973]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44157814871016693]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
24 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.440909090909091]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
25 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
26 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
27 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
28 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
29 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
30 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4357034795763994]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
31 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
32 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
33 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44393939393939397]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4393939393939394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4363636363636364]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
34 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
35 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
36 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
37 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
38 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
39 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44242424242424244]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
40 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
41 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
42 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44393939393939397]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4393939393939394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44242424242424244]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
43 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
44 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
45 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
46 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44393939393939397]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4393939393939394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.440909090909091]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
47 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
48 arch
Basetime is: 6.71
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4426229508196722]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4336810730253353]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4336810730253353]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4351713859910581]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4321907600596125]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
49 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4393939393939394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
5 gens
50 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
1 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
2 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
3 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
4 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
5 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4212121212121212]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4393939393939394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
6 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
7 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
8 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44393939393939397]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4393939393939394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44242424242424244]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
9 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
10 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4374057315233786]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
11 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
12 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4365558912386707]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
13 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
14 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4387291981845688]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
15 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
16 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
17 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
18 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
19 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4393939393939394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4378787878787879]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.440909090909091]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
20 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
21 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43806646525679754]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
22 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
23 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
24 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
25 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
26 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
27 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
28 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
29 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
30 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
31 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4425981873111783]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
32 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
33 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
34 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4419306184012067]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
35 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4259818731117824]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
36 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4145234493192133]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
37 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43609022556390975]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
38 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
39 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
40 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
41 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
42 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.440909090909091]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
43 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.440909090909091]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
44 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
45 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4374057315233786]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
46 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
47 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43806646525679754]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
48 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
49 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4393939393939394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4393939393939394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
6 gens
50 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4352409638554217]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4367469879518072]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
1 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
2 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
3 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
4 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4387291981845688]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
5 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
6 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
7 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
8 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
9 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
10 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4387291981845688]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
11 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
12 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
13 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
14 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44242424242424244]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
15 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
16 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43843843843843844]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
17 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44393939393939397]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4393939393939394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4378787878787879]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44242424242424244]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
18 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
19 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
20 arch
Basetime is: 6.59
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4446130500758726]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44309559939301973]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4400606980273141]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44309559939301973]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
21 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44242424242424244]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
22 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4393939393939394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4393939393939394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.440909090909091]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
23 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
24 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
25 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
26 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43609022556390975]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43759398496240604]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
27 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
28 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
29 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
30 arch
Basetime is: 6.59
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44309559939301973]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44309559939301973]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44309559939301973]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4446130500758726]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4400606980273141]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
31 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4393939393939394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
32 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4387291981845688]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
33 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
34 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4421052631578947]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43609022556390975]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43609022556390975]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
35 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
36 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.443267776096823]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
37 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
38 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
39 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
40 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
41 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
42 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
43 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43806646525679754]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
44 arch
Basetime is: 6.59
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44309559939301973]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44309559939301973]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44309559939301973]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44309559939301973]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4400606980273141]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
45 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
46 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
47 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
48 arch
Basetime is: 6.59
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44309559939301973]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44309559939301973]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44309559939301973]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
49 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
7 gens
50 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
1 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4393939393939394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4393939393939394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.440909090909091]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
2 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43806646525679754]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
3 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
4 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4393939393939394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.440909090909091]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
5 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
6 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
7 arch
Basetime is: 6.67
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4362818590704648]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4362818590704648]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4362818590704648]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43478260869565216]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43928035982009]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
8 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
9 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4236006051437216]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
10 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43843843843843844]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
11 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43806646525679754]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
12 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
13 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43609022556390975]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43759398496240604]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
14 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
15 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4365558912386707]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
16 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.440909090909091]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
17 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
18 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
19 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
20 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4372163388804841]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
21 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
22 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
23 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4425981873111783]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
24 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
25 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
26 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
27 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
28 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4374057315233786]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
29 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
30 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.41540785498489424]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
31 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
32 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4229607250755287]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
33 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
34 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
35 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.42835595776772245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
36 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
37 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43806646525679754]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
38 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43993993993993996]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
39 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
40 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4169184290030211]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
41 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4441087613293051]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
42 arch
Basetime is: 6.59
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4446130500758726]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44309559939301973]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44309559939301973]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44157814871016693]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44309559939301973]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44309559939301973]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
43 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
44 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44393939393939397]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44393939393939397]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4378787878787879]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44393939393939397]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
45 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
46 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43843843843843844]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
47 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
48 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4253393665158371]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
49 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4425981873111783]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
8 gens
50 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4374057315233786]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
1 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4419306184012067]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
2 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
3 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
4 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
5 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
6 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4406015037593985]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
7 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
8 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
9 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4425981873111783]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
10 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
11 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
12 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44427710843373497]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
13 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.41478129713423834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
14 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4434389140271493]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
15 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4374057315233786]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
16 arch
Basetime is: 6.81
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4258443465491924]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4258443465491924]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4287812041116006]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43024963289280477]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4273127753303965]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4287812041116006]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4273127753303965]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43024963289280477]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4273127753303965]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
17 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
18 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
19 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4434389140271493]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
20 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
21 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
22 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4434389140271493]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
23 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4313725490196078]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
24 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4434389140271493]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
25 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
26 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
27 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
28 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
29 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4441087613293051]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
30 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4427710843373494]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
31 arch
Basetime is: 6.67
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43928035982009]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43928035982009]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43928035982009]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
32 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
33 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
34 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43993993993993996]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
35 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4441087613293051]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
36 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4406015037593985]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
37 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
38 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
39 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.41503759398496237]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
40 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
41 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4406015037593985]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
42 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4419306184012067]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
43 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
44 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
45 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
46 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43609022556390975]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
47 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
48 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
49 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4441087613293051]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
9 gens
50 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4231927710843374]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
1 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
2 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
3 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
4 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
5 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4387291981845688]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
6 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4419306184012067]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
7 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.42081447963800905]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
8 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43759398496240604]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
9 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
10 arch
Basetime is: 6.52
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44938650306748473]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44785276073619634]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44938650306748473]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4447852760736197]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44785276073619634]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.446319018404908]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.446319018404908]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44785276073619634]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44785276073619634]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44938650306748473]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
11 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
12 arch
Basetime is: 6.82
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.42961876832844575]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.42815249266862165]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.42668621700879766]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.42815249266862165]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.42815249266862165]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.42815249266862165]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.42815249266862165]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.42815249266862165]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.42668621700879766]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.42961876832844575]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
13 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
14 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
15 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
16 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4425981873111783]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
17 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43843843843843844]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
18 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.42771084337349397]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
19 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
20 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
21 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
22 arch
Basetime is: 6.75
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43555555555555553]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43851851851851853]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4325925925925926]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4340740740740741]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4311111111111111]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4325925925925926]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4340740740740741]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4325925925925926]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4325925925925926]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4325925925925926]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
23 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4441087613293051]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
24 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
25 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4350453172205438]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
26 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4406015037593985]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
27 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
28 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4253393665158371]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4419306184012067]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
29 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
30 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44144144144144143]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43843843843843844]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
31 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
32 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
33 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.41993957703927487]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
34 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
35 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4434389140271493]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4298642533936652]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.41327300150829566]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
36 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
37 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
38 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4425981873111783]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
39 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
40 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43609022556390975]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
41 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43759398496240604]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
42 arch
Basetime is: 6.7
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4373134328358209]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.41940298507462687]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43582089552238806]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4343283582089552]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43582089552238806]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43582089552238806]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43582089552238806]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43582089552238806]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4343283582089552]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43582089552238806]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
43 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
44 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
45 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43843843843843844]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
46 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
47 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43609022556390975]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
48 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
49 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4447806354009077]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.443267776096823]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
10 gens
50 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
1 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43759398496240604]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
2 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4138972809667674]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4365558912386707]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
3 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
4 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43609022556390975]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
5 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43609022556390975]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43759398496240604]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
6 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43993993993993996]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
7 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
8 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4421052631578947]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4225563909774436]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43759398496240604]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
9 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
10 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4419306184012067]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
11 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43843843843843844]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
12 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
13 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4427710843373494]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
14 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
15 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
16 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
17 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
18 arch
Basetime is: 6.6
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44393939393939397]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.440909090909091]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44242424242424244]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44242424242424244]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
19 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4352409638554217]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
20 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43759398496240604]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
21 arch
Basetime is: 6.56
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4466463414634147]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4435975609756098]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4451219512195122]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4451219512195122]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4435975609756098]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4451219512195122]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4451219512195122]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4466463414634147]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4466463414634147]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4451219512195122]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4451219512195122]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
22 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
23 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4427710843373494]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4246987951807229]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
24 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43843843843843844]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
25 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.42081447963800905]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
26 arch
Basetime is: 6.78
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4277286135693215]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43215339233038347]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43067846607669613]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43067846607669613]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43067846607669613]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.42920353982300885]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.42920353982300885]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4277286135693215]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.42920353982300885]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43215339233038347]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.42920353982300885]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
27 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
28 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
29 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4421052631578947]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44360902255639095]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
30 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44144144144144143]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43843843843843844]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
31 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4225563909774436]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.42105263157894735]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
32 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43759398496240604]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
33 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4421052631578947]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43759398496240604]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
34 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4406015037593985]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
35 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
36 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.42018072289156627]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
37 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4387291981845688]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
38 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4406015037593985]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
39 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
40 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
41 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4447806354009077]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4402420574886536]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
42 arch
Basetime is: 6.67
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4407796101949025]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4362818590704648]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43928035982009]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4362818590704648]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4362818590704648]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43778110944527737]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
43 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4406015037593985]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
44 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43806646525679754]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
45 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4419306184012067]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
46 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4419306184012067]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
47 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.45030120481927716]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
48 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4441087613293051]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4425981873111783]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
49 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
11 gens
50 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4421052631578947]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
1 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
2 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4406015037593985]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
3 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4354354354354354]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
4 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4171686746987952]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
5 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
6 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
7 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43843843843843844]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
8 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
9 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
10 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
11 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43759398496240604]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
12 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
13 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
14 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4434389140271493]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.42835595776772245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4268476621417798]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4419306184012067]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
15 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
16 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43993993993993996]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
17 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4189189189189189]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4144144144144144]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43993993993993996]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
18 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4434389140271493]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
19 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4421052631578947]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4240601503759398]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
20 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4406015037593985]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
21 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4358974358974359]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
22 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4406015037593985]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
23 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
24 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
25 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
26 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
27 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4427710843373494]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
28 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4204204204204204]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43993993993993996]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
29 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
30 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
31 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4406015037593985]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
32 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
33 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
34 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
35 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4268476621417798]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4419306184012067]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
36 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
37 arch
Basetime is: 6.57
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4185692541856925]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4459665144596652]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4459665144596652]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4429223744292237]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4459665144596652]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4459665144596652]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4429223744292237]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4429223744292237]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4459665144596652]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4444444444444444]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4429223744292237]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4444444444444444]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
38 arch
Basetime is: 6.74
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406528189910979]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43471810089020774]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43175074183976264]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43175074183976264]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43471810089020774]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43471810089020774]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43471810089020774]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43323442136498513]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43175074183976264]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43471810089020774]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43323442136498513]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43323442136498513]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
39 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44661654135338347]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43759398496240604]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
40 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
41 arch
Basetime is: 6.67
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43928035982009]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43928035982009]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43928035982009]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43928035982009]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4362818590704648]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4362818590704648]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43928035982009]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43778110944527737]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
42 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
43 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
44 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
45 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
46 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.41415662650602414]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
47 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
48 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
49 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43609022556390975]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4406015037593985]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
12 gens
50 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
1 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4427710843373494]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4352409638554217]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
2 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
3 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
4 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
5 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
6 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.42081447963800905]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
7 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
8 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43609022556390975]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43609022556390975]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
9 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
10 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4419306184012067]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
11 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4352409638554217]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
12 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
13 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43693693693693697]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
14 arch
Basetime is: 6.79
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43151693667157587]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4300441826215022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4300441826215022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4285714285714286]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4300441826215022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43151693667157587]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4300441826215022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4300441826215022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4300441826215022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43151693667157587]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4285714285714286]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4300441826215022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43151693667157587]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
15 arch
Basetime is: 6.67
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43928035982009]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43928035982009]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4362818590704648]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43928035982009]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43928035982009]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43928035982009]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4362818590704648]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4362818590704648]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4362818590704648]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43928035982009]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43928035982009]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
16 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4421052631578947]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
17 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4516616314199396]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
18 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43843843843843844]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
19 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4427710843373494]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
20 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
21 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43759398496240604]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
22 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.443267776096823]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
23 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43693693693693697]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
24 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4434389140271493]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
25 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4313725490196078]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
26 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4427710843373494]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
27 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
28 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43843843843843844]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
29 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
30 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
31 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
32 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
33 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
34 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4186746987951807]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4367469879518072]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
35 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
36 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
37 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43843843843843844]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
38 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4352409638554217]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
39 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
40 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
41 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4419306184012067]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
42 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.41327300150829566]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
43 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4434389140271493]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4434389140271493]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4419306184012067]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
44 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4425981873111783]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
45 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4441087613293051]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
46 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
47 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43609022556390975]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.41804511278195483]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43609022556390975]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4406015037593985]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
48 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
49 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
13 gens
50 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4425981873111783]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
1 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4231927710843374]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
2 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
3 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43759398496240604]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
4 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
5 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4406015037593985]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
6 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.41478129713423834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4419306184012067]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
7 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
8 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
9 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
10 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
11 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4427710843373494]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
12 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
13 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4246987951807229]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
14 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4354354354354354]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4354354354354354]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4354354354354354]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
15 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
16 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.41265060240963863]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
17 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
18 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
19 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
20 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4434389140271493]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
21 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
22 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43609022556390975]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43609022556390975]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43759398496240604]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
23 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
24 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
25 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43609022556390975]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
26 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
27 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4427710843373494]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
28 arch
Basetime is: 6.58
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44376899696048633]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44376899696048633]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44376899696048633]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44376899696048633]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44376899696048633]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44376899696048633]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4452887537993921]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44376899696048633]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44376899696048633]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44376899696048633]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44376899696048633]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44376899696048633]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44224924012158057]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.44224924012158057]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
29 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.41478129713423834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
30 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4238310708898944]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
31 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4406015037593985]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
32 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
33 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43609022556390975]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4406015037593985]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
34 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4427710843373494]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
35 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43693693693693697]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
36 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.45112781954887216]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
37 arch
Basetime is: 6.61
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4402420574886536]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4447806354009077]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44175491679273826]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.44175491679273826]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
38 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
39 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4427710843373494]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
40 arch
Basetime is: 6.67
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4362818590704648]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43928035982009]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4362818590704648]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43928035982009]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
41 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
42 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
43 arch
Basetime is: 6.74
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43471810089020774]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43323442136498513]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43323442136498513]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43323442136498513]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43323442136498513]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43471810089020774]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43323442136498513]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43323442136498513]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43471810089020774]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43471810089020774]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43175074183976264]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43323442136498513]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43323442136498513]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43471810089020774]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
44 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4434389140271493]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4419306184012067]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
45 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
46 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4419306184012067]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
47 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4255639097744361]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
48 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4427710843373494]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
49 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4352409638554217]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
14 gens
50 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
1 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
2 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4427710843373494]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
3 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4427710843373494]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
4 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4434389140271493]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
5 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4425981873111783]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
6 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
7 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
8 arch
Basetime is: 6.08
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.48026315789473684]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.48190789473684215]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4786184210526316]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4786184210526316]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.48190789473684215]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.48026315789473684]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.48026315789473684]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.48190789473684215]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.48190789473684215]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.48026315789473684]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.48026315789473684]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.48026315789473684]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.48190789473684215]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.48190789473684215]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.48190789473684215]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
9 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43759398496240604]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
10 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4129129129129129]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4354354354354354]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43843843843843844]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
11 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4427710843373494]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4186746987951807]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
12 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4441087613293051]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
13 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43759398496240604]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
14 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.41415662650602414]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
15 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4421052631578947]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43609022556390975]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43609022556390975]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43609022556390975]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.42105263157894735]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
16 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4441087613293051]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.44108761329305135]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
17 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
18 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43759398496240604]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
19 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
20 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43693693693693697]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
21 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
22 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.42232277526395173]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
23 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4441087613293051]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4425981873111783]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
24 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44144144144144143]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44144144144144143]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43843843843843844]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
25 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4434389140271493]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
26 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4427710843373494]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4427710843373494]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
27 arch
Basetime is: 6.7
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4373134328358209]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43582089552238806]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4343283582089552]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43582089552238806]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4343283582089552]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43582089552238806]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43582089552238806]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4373134328358209]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4373134328358209]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4373134328358209]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4343283582089552]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43582089552238806]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4373134328358209]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4388059701492537]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43582089552238806]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
28 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.41478129713423834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
29 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
30 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43806646525679754]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
31 arch
Basetime is: 6.74
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43471810089020774]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43471810089020774]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43323442136498513]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43175074183976264]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43323442136498513]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43471810089020774]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43323442136498513]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43175074183976264]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43323442136498513]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43175074183976264]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43471810089020774]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43175074183976264]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43471810089020774]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43471810089020774]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43323442136498513]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
32 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43609022556390975]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.41804511278195483]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43609022556390975]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
33 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
34 arch
Basetime is: 6.67
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43928035982009]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43928035982009]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43928035982009]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4362818590704648]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43928035982009]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4362818590704648]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4362818590704648]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43778110944527737]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
35 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4419306184012067]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
36 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4412650602409639]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
37 arch
Basetime is: 6.62
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4395770392749245]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4244712990936556]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4425981873111783]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.44108761329305135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4395770392749245]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
38 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4421052631578947]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4406015037593985]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
39 arch
Basetime is: 6.83
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43045387994143486]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.42752562225475843]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.42606149341142024]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.42898975109809667]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.42752562225475843]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.42606149341142024]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.42752562225475843]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.42606149341142024]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.42752562225475843]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.42898975109809667]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.42898975109809667]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.42752562225475843]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.42606149341142024]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.42606149341142024]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.42898975109809667]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
40 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43993993993993996]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
41 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43759398496240604]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
42 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
43 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4406015037593985]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
44 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4421052631578947]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4421052631578947]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43759398496240604]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
45 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4419306184012067]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
46 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4195488721804511]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43609022556390975]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43308270676691724]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43609022556390975]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4406015037593985]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
47 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4406015037593985]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
48 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4419306184012067]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
49 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44494720965309204]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
15 gens
50 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4193061840120663]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
1 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
2 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4120300751879699]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.4406015037593985]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
3 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4345864661654135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
4 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.41353383458646614]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
5 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
6 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4374057315233786]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4238310708898944]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
7 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
8 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4345864661654135]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43609022556390975]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
9 arch
Basetime is: 6.67
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43928035982009]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4362818590704648]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43928035982009]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4362818590704648]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43478260869565216]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4362818590704648]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4362818590704648]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.41829085457271364]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43928035982009]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4362818590704648]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4362818590704648]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.41829085457271364]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43778110944527737]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.43928035982009]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
10 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.41804511278195483]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.41804511278195483]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
11 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
12 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4434389140271493]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.4419306184012067]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
13 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4434389140271493]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
14 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
15 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
16 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4434389140271493]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.44042232277526394]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
17 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.43759398496240604]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
18 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.41327300150829566]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.4419306184012067]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
19 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4427710843373494]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4231927710843374]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.43825301204819284]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
20 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4120300751879699]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.4406015037593985]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
21 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4367469879518072]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
22 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4421052631578947]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.4406015037593985]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
23 arch
Basetime is: 6.65
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4421052631578947]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4225563909774436]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43759398496240604]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4390977443609022]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.4406015037593985]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.4390977443609022]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
24 arch
Basetime is: 6.63
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4434389140271493]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.4419306184012067]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.4389140271493213]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.44042232277526394]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.4389140271493213]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
25 arch
Basetime is: 6.64
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.4427710843373494]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43825301204819284]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.4412650602409639]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43975903614457834]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.43975903614457834]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
26 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44144144144144143]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.43993993993993996]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
27 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.43843843843843844]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
28 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.44144144144144143]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 4): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 5): [37]2424899602 [fitness: 0.42792792792792794]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 6): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 7): [37]2424899602 [fitness: 0.44144144144144143]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 8): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 9): [37]2424899602 [fitness: 0.43993993993993996]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 10): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 11): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 12): [37]2424899602 [fitness: 0.44144144144144143]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 13): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 14): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 15): [37]2424899602 [fitness: 0.43993993993993996]
done evolving!
best entity (GA): 0000010010000100010010000100000010010
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Data.List
 
f :: Integer -> Integer
f x = f (x + 1)
fib1 0 _ b = b
fib1 n (!a) b = fib1 (n - 1) b (a + b)
fiba = fib1 300000 0 1
x = x + 1
 
inf :: Integer -> Integer
inf n = 0
inf1 = inf x
fib2 0 _ (!b) = b
fib2 n a b = fib2 (n - 1) b (a + b)
fibb = fib2 300000 0 1
 
inf' :: Integer -> Integer
inf' n = 0
inf2 = inf' $ f 0
fib3 (!0) _ b = b
fib3 n a (!b) = fib3 (n - 1) b (a + b)
fibc = fib3 300000 0 1
 
inf'' :: Integer -> Integer
inf'' n = 0
inf3 = inf'' $ f 0
fib4 0 _ b = b
fib4 (!n) a b = fib4 (n - 1) b (a + b)
fibd = fib4 300000 0 1
main = do putStrLn $ show (fiba + fibb + fibc + inf1 + inf2 + inf3)
>>>>>>>>>>>>>>FINISH OPTIMIZATION>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>START OPTIMIZATION>>>>>>>>>>>>>>>
1 pop
16 gens
29 arch
Basetime is: 6.66
bits 0000010010000100010010000100000010010
best entity (gen. 0): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 1): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 2): [37]2424899602 [fitness: 0.43693693693693697]
bits 0000010010000100010010000100000010010
bits 0000010010000100010010000100000010010
best entity (gen. 3): [37]2424899602 [fitness: 0.43843843843843844]
bits 0000010010000100010010000100000010010
bits 000001